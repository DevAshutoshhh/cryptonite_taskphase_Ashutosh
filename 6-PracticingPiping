# Task-phase Writeup

## 1-Redirecting Output  
Output can be redirected using the `>` character.  
Solution:  
`echo PWN > COLLEGE`

## 2-Redirecting More Output  
Output from any command can be redirected.  
Solution:  
`/challenge/run > myflag` redirects the output to the file `myflag`.<br>
Use `cat myflag` to view the flag.<br> 
`cat myflag`<br>

## 3-Appending Output  
The `>>` operator appends output to an existing file.  
Solution:  
`/challenge/run >> /home/hacker/the-flag` appends part of the flag to the file and the second half to stdout.<br>  
Then, run `echo stdout >> /home/hacker/the-flag` to append the rest of the flag.<br>  
Use `cat /home/hacker/the-flag` to see the full flag.<br>  
`cat /home/hacker/the-flag`<br>

## 4-Redirecting Errors  
File descriptors are numbers used to manage input/output streams in Linux.
Solution:  
`/challenge/run > myflag 2> instructions` redirects standard output to `myflag` and errors to `instructions`.<br>  
Use `cat myflag` to retrieve the flag.<br>  
`cat myflag`<br>

## 5-Redirecting Inputs  
The `<` symbol is used to redirect input from a file.  
Solution:  
`echo COLLEGE > PWN` stores "COLLEGE" in `PWN`.<br>  
Then, `/challenge/run < PWN` retrieves the flag.<br>

## 6-Grepping Stored Results  
`grep` is used to search for specific patterns in files or input streams.  
Solution:  
`/challenge/run > /tmp/data.txt` stores the output, and `grep "pwn.college{" /tmp/data.txt` extracts the flag.<br>  
`grep "pwn.college{" /tmp/data.txt`<br>

## 7-Grepping Live Results  
The `|` operator pipes the output of one command as input to another.  
Solution:  
`/challenge/run | grep pwn.college{` retrieves the flag directly from the live output.<br>

## 8-Grepping Errors  
`>&` redirects one file descriptor to another.  
Solution:  
`/challenge/run 2>&1 | grep pwn.college{` combines stdout and stderr and then searches for the flag.<br>

## 9-Duplicating Piped Data with Tee  
`tee` duplicates data flowing through pipes and stores it in files.  
Solution:  
First, create a file with `touch random`.  
Then, run `/challenge/pwn | tee random | /challenge/college` to intercept the data.  
Use `cat random` to reveal the hint, then run `/challenge/pwn --secret [arg] | /challenge/college` to get the flag.  
`cat random`  
`/challenge/pwn --secret [arg] | /challenge/college`

## 10-Writing to Multiple Programs  
`tee` can duplicate output to multiple commands.  
Solution:  
`/challenge/hack | tee >(/challenge/the) | /challenge/planet`<br>  
The output of `/challenge/hack` is piped to `tee`, which sends a copy to `/challenge/the` and another to `/challenge/planet`.<br>

## 11-Split-piping stderr and stdout  
Solution:  
`/challenge/hack > >(/challenge/planet) 2> >(/challenge/the)`  
